#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.2
#  in conjunction with Tcl version 8.6
#    Nov 15, 2022 11:45:45 AM -03  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from graphlib import TopologicalSorter
from tkinter import *
from tkinter import Toplevel, messagebox

import json
import requests
import appFilaConf as fila

# import tela_support


# def popup1(event, *args, **kwargs):
#         Popupmenu1 = tk.Menu(tela_support.root, tearoff=0)
#         Popupmenu1.configure(activebackground="#ececec")
#         Popupmenu1.configure(activeborderwidth="1")
#         Popupmenu1.configure(activeforeground="#000000")
#         Popupmenu1.configure(background="#d9d9d9")
#         Popupmenu1.configure(borderwidth="1")
#         Popupmenu1.configure(disabledforeground="#a3a3a3")
#         Popupmenu1.configure(foreground="#000000")
#         Popupmenu1.post(event.x_root, event.y_root)

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("600x450+357+78")
        top.minsize(120, 1)
        top.maxsize(1284, 701)
        top.resizable(1,  1)
        top.title("Toplevel 0")
        top.configure(background="#d9d9d9")

        self.top = top

        self.Label1 = tk.Label(self.top)
        self.Label1.place(relx=0.05, rely=0.044, height=21, width=64)
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(compound='left')
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''Registro''')

        self.Label2 = tk.Label(self.top)
        self.Label2.place(relx=0.05, rely=0.2, height=21, width=54)
        self.Label2.configure(anchor='w')
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(compound='left')
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(text='''Tema''')

        self.registro = tk.Entry(self.top)
        self.registro.place(relx=0.05, rely=0.089, height=20, relwidth=0.407)
        self.registro.configure(background="white")
        self.registro.configure(disabledforeground="#a3a3a3")
        self.registro.configure(font="TkFixedFont")
        self.registro.configure(foreground="#000000")
        self.registro.configure(insertbackground="black")

        self.tema = tk.Entry(self.top)
        self.tema.place(relx=0.05, rely=0.244, height=20, relwidth=0.407)
        self.tema.configure(background="white")
        self.tema.configure(disabledforeground="#a3a3a3")
        self.tema.configure(font="TkFixedFont")
        self.tema.configure(foreground="#000000")
        self.tema.configure(insertbackground="black")

        self.Label3 = tk.Label(self.top)
        self.Label3.place(relx=0.533, rely=0.044, height=21, width=84)
        self.Label3.configure(anchor='w')
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(compound='left')
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(text='''Descrição''')

        self.Label4 = tk.Label(self.top)
        self.Label4.place(relx=0.533, rely=0.2, height=21, width=64)
        self.Label4.configure(anchor='w')
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(compound='left')
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(text='''Autores''')

        self.descricao = tk.Entry(self.top)
        self.descricao.place(relx=0.533, rely=0.089, height=20, relwidth=0.407)
        self.descricao.configure(background="white")
        self.descricao.configure(disabledforeground="#a3a3a3")
        self.descricao.configure(font="TkFixedFont")
        self.descricao.configure(foreground="#000000")
        self.descricao.configure(insertbackground="black")

        self.autores = tk.Entry(self.top)
        self.autores.place(relx=0.533, rely=0.244, height=20, relwidth=0.407)
        self.autores.configure(background="white")
        self.autores.configure(disabledforeground="#a3a3a3")
        self.autores.configure(font="TkFixedFont")
        self.autores.configure(foreground="#000000")
        self.autores.configure(insertbackground="black")

        self.btnSalvar = tk.Button(self.top, command=btnSalvarDados)
        self.btnSalvar.place(relx=0.533, rely=0.333, height=24, width=107)
        self.btnSalvar.configure(activebackground="#ececec")
        self.btnSalvar.configure(activeforeground="#000000")
        self.btnSalvar.configure(background="#b4fce4")
        self.btnSalvar.configure(compound='left')
        self.btnSalvar.configure(disabledforeground="#a3a3a3")
        self.btnSalvar.configure(foreground="#000000")
        self.btnSalvar.configure(highlightbackground="#d9d9d9")
        self.btnSalvar.configure(highlightcolor="black")
        self.btnSalvar.configure(pady="0")
        self.btnSalvar.configure(text='''Enviar''')

        self.btnCarregar = tk.Button(self.top, command=btnCarregarDados)
        self.btnCarregar.place(relx=0.783, rely=0.333, height=24, width=97)
        self.btnCarregar.configure(activebackground="#ececec")
        self.btnCarregar.configure(activeforeground="#000000")
        self.btnCarregar.configure(background="#fffbb0")
        self.btnCarregar.configure(compound='left')
        self.btnCarregar.configure(disabledforeground="#a3a3a3")
        self.btnCarregar.configure(foreground="#000000")
        self.btnCarregar.configure(highlightbackground="#d9d9d9")
        self.btnCarregar.configure(highlightcolor="black")
        self.btnCarregar.configure(pady="0")
        self.btnCarregar.configure(text='''Carregar''')

        self.Listbox1 = tk.Listbox(self.top)
        self.Listbox1.place(relx=0.05, rely=0.422, relheight=0.516
                , relwidth=0.89)
        self.Listbox1.configure(background="white")
        self.Listbox1.configure(disabledforeground="#a3a3a3")
        self.Listbox1.configure(font="TkFixedFont")
        self.Listbox1.configure(foreground="#000000")



enderecoApi = "http://127.0.0.1:5000/api/tarefas"


def carregarTarefas():
    response = requests.get(enderecoApi)
    tam = top.Listbox1.size()
    if tam > 0:
        top.Listbox1.delete(0, tam)
    tarefas = response.json()
    i = 0
    for tarefa in tarefas:
        top.Listbox1.insert(i, tarefa['registro'] + ', ' + tarefa['tema'] + ', ' + tarefa['descricao'] + ', ' + tarefa['autores'])
        i+=1
        top.Listbox1.insert(i, ' ')
        i+=1
        

def btnSalvarDados():
    reg = top.registro.get()
    tem = top.tema.get()
    desc = top.descricao.get()
    auto = top.autores.get()

    tarefa = {
                "registro": reg, 
                "tema": tem,
                "descricao": desc,
                "autores": auto
             }

    strTarefa = json.dumps(tarefa)

    conn = fila.obterConexao()
    
    conn.send(body=strTarefa, destination=fila.confFila)
    conn.disconnect()

    # requests.post(enderecoApi, json=tarefa)
    messagebox.showinfo("Atenção", "Salvo com sucesso!")
    btnCarregarDados()


def btnCarregarDados():
    top.registro.delete(0, END)
    top.tema.delete(0, END)
    top.descricao.delete(0, END)
    top.autores.delete(0, END)
    carregarTarefas()

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global top, val, w, root
    root = tk.Tk()
    top = Toplevel1(root)
    # carregarTarefas()
    root.mainloop()
    
if __name__ == '__main__':
    vp_start_gui()



    
# def start_up():
#     tela_support.main()


# if __name__ == '__main__':
#     tela_support.main()


# # global top, val, w, root
# root = tk.Tk()
# top = Toplevel1(root)
